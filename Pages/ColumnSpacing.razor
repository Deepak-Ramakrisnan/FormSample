@page "/ColumnSpacing"

@using Syncfusion.Blazor.Form
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups

<PageTitle>SfDataForm component</PageTitle>

<h3>Columns and Column spacing</h3>

<SfDataForm ID="MyForm"
        Model="@exampleModel"
        Width="75%"
       
        LabelPosition="FormLabelPosition.Top"
        ButtonsAlignment="FormButtonsAlignment.Right"
        ValidationMessageDisplay="@Validation" OnSubmit="HandleFormSubmit" OnUpdate="FormUpdate">
    <FormValidation>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </FormValidation>
    <FormItems>
        <FormGroup LabelText="Passenger Details" Columns="2"
                   ColumnSpacing="50px">
            <FormItem Field="@nameof(exampleModel.FirstName)" LabelText="FirstName" ColumnSpan="2"></FormItem>
            <FormItem Field="@nameof(exampleModel.LastName)" LabelText="LastName" ColumnSpan="2"> </FormItem>
            <FormItem Field="@nameof(exampleModel.Email)" LabelText="Email" Placeholder="someone@example.com"> </FormItem>
            <FormItem Field="@nameof(exampleModel.age)" LabelText="Age"></FormItem>
            <FormItem Field="@nameof(exampleModel.Sex)" LabelText="Sex" EditorType="FormEditorType.DropdownList">
                <Template>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList TValue="string" TItem="string" @bind-Value="@exampleModel.Sex" DataSource="@data"></Syncfusion.Blazor.DropDowns.SfDropDownList>
                </Template>
            </FormItem>
            <FormItem Field="@nameof(exampleModel.Accept)" LabelText="Terms and Conditions" EditorType="FormEditorType.Switch"></FormItem>
        </FormGroup>
    </FormItems>

    <FormButtons>
        <SfButton>Submit</SfButton>
    </FormButtons>

</SfDataForm>

<br />
<br />
<br />
<br />
<br />
<br />

<SfDataForm ID="MyForm1"
        Model="@exampleModel1"
        Width="100%"
        Columns=2
        ColumnSpacing="50px"
        LabelPosition="FormLabelPosition.Top"
        ButtonsAlignment="FormButtonsAlignment.Right"
        ValidationMessageDisplay="@Validation" OnSubmit="HandleFormSubmit" OnUpdate="FormUpdate">
    <FormValidation>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </FormValidation>
    <FormItems>
        <FormGroup LabelText="Passenger-1 Details" Columns="2" ColumnSpacing="20px">
            <FormItem Field="@nameof(exampleModel1.FirstName)" LabelText="FirstName"></FormItem>
            <FormItem Field="@nameof(exampleModel1.LastName)" LabelText="LastName"> </FormItem>
            <FormItem Field="@nameof(exampleModel1.Email)" LabelText="Email" Placeholder="someone@example.com"> </FormItem>
            <FormItem Field="@nameof(exampleModel1.age)" LabelText="Age"></FormItem>
            <FormItem Field="@nameof(exampleModel1.Sex)" LabelText="Sex" EditorType="FormEditorType.DropdownList">
                <Template>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList TValue="string" TItem="string" @bind-Value="@exampleModel1.Sex" DataSource="@data"></Syncfusion.Blazor.DropDowns.SfDropDownList>
                </Template>
            </FormItem>
        </FormGroup>
        <FormGroup LabelText="Passenger-2 Details" Columns="2" ColumnSpacing="20px">
            <FormItem Field="@nameof(exampleModel1.FirstName1)" LabelText="FirstName"></FormItem>
            <FormItem Field="@nameof(exampleModel1.LastName1)" LabelText="LastName"> </FormItem>
            <FormItem Field="@nameof(exampleModel1.Email1)" LabelText="Email" Placeholder="someone@example.com"> </FormItem>
            <FormItem Field="@nameof(exampleModel1.age1)" LabelText="Age"></FormItem>
            <FormItem Field="@nameof(exampleModel1.Sex1)" LabelText="Sex" EditorType="FormEditorType.DropdownList">
            </FormItem>
        </FormGroup>
        <FormItem Field="@nameof(exampleModel.Accept)" LabelText="Terms and Conditions" EditorType="FormEditorType.Switch"></FormItem>
    </FormItems>

    <FormButtons>
        <SfButton>Submit</SfButton>
    </FormButtons>

</SfDataForm>

@code {

    private void FormUpdate(FormUpdateEventArgs args)
    {

    }

    private async Task HandleFormSubmit(EditContext editContext)
    {
        bool isFormValid = editContext.Validate();

        if (isFormValid)
        {
            //apply some custom logic when the form is valud
        }
        else
        {
            //apply some custom logic when the form is not valid
        }
    }

    SfDataForm? validate;

    FormValidationMessageDisplay Validation { get; set; } = FormValidationMessageDisplay.Inline;

    
    public string[] data = new string[] { "Male", "Female", "Others" };

    EditContext myEditContext { get; set; }

    protected override void OnInitialized()
    {
        myEditContext = new EditContext(exampleModel);
        base.OnInitialized();
    }

    public class ExampleModel
    {

        [Required(ErrorMessage = "Enter FirstName here")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Enter LastName here")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Enter Email here")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Enter Date here")]
        public int? age { get; set; }

        [Required(ErrorMessage = "You need to agree to the Terms and Conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the Terms and Conditions")]
        public bool Accept { get; set; }

        [Required(ErrorMessage = "You need to choose the gender")]
        public string Sex { get; set; }
    }

    private ExampleModel exampleModel = new ExampleModel();

    public class ExampleModel1
    {

        [Required(ErrorMessage = "Enter FirstName here")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Enter LastName here")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Enter Email here")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Enter Date here")]
        public int? age { get; set; }

        [Required(ErrorMessage = "You need to agree to the Terms and Conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the Terms and Conditions")]
        public bool Accept { get; set; }

        [Required(ErrorMessage = "You need to choose the gender")]
        public string Sex { get; set; }

        [Required(ErrorMessage = "Enter FirstName here")]
        public string FirstName1 { get; set; }

        [Required(ErrorMessage = "Enter LastName here")]
        public string LastName1 { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string Password1 { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string ConfirmPassword1 { get; set; }

        [Required(ErrorMessage = "Enter Email here")]
        public string Email1 { get; set; }

        [Required(ErrorMessage = "Enter Date here")]
        public int? age1 { get; set; }

        [Required(ErrorMessage = "You need to agree to the Terms and Conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the Terms and Conditions")]
        public bool Accept1 { get; set; }

        [Required(ErrorMessage = "You need to choose the gender")]
        public string Sex1 { get; set; }
    }

    private ExampleModel1 exampleModel1 = new ExampleModel1();

}
